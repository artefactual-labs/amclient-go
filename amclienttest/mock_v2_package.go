// Code generated by MockGen. DO NOT EDIT.
// Source: go.artefactual.dev/amclient (interfaces: PackageService)
//
// Generated by this command:
//
//	mockgen -typed -destination=./amclienttest/mock_v2_package.go -package=amclienttest go.artefactual.dev/amclient PackageService
//

// Package amclienttest is a generated GoMock package.
package amclienttest

import (
	context "context"
	reflect "reflect"

	amclient "go.artefactual.dev/amclient"
	gomock "go.uber.org/mock/gomock"
)

// MockPackageService is a mock of PackageService interface.
type MockPackageService struct {
	ctrl     *gomock.Controller
	recorder *MockPackageServiceMockRecorder
}

// MockPackageServiceMockRecorder is the mock recorder for MockPackageService.
type MockPackageServiceMockRecorder struct {
	mock *MockPackageService
}

// NewMockPackageService creates a new mock instance.
func NewMockPackageService(ctrl *gomock.Controller) *MockPackageService {
	mock := &MockPackageService{ctrl: ctrl}
	mock.recorder = &MockPackageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageService) EXPECT() *MockPackageServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPackageService) Create(arg0 context.Context, arg1 *amclient.PackageCreateRequest) (*amclient.PackageCreateResponse, *amclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*amclient.PackageCreateResponse)
	ret1, _ := ret[1].(*amclient.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockPackageServiceMockRecorder) Create(arg0, arg1 any) *MockPackageServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPackageService)(nil).Create), arg0, arg1)
	return &MockPackageServiceCreateCall{Call: call}
}

// MockPackageServiceCreateCall wrap *gomock.Call
type MockPackageServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPackageServiceCreateCall) Return(arg0 *amclient.PackageCreateResponse, arg1 *amclient.Response, arg2 error) *MockPackageServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPackageServiceCreateCall) Do(f func(context.Context, *amclient.PackageCreateRequest) (*amclient.PackageCreateResponse, *amclient.Response, error)) *MockPackageServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPackageServiceCreateCall) DoAndReturn(f func(context.Context, *amclient.PackageCreateRequest) (*amclient.PackageCreateResponse, *amclient.Response, error)) *MockPackageServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
