// Code generated by MockGen. DO NOT EDIT.
// Source: go.artefactual.dev/amclient (interfaces: JobsService)
//
// Generated by this command:
//
//	mockgen -typed -destination=./amclienttest/mock_v2_jobs.go -package=amclienttest go.artefactual.dev/amclient JobsService
//

// Package amclienttest is a generated GoMock package.
package amclienttest

import (
	context "context"
	reflect "reflect"

	amclient "go.artefactual.dev/amclient"
	gomock "go.uber.org/mock/gomock"
)

// MockJobsService is a mock of JobsService interface.
type MockJobsService struct {
	ctrl     *gomock.Controller
	recorder *MockJobsServiceMockRecorder
}

// MockJobsServiceMockRecorder is the mock recorder for MockJobsService.
type MockJobsServiceMockRecorder struct {
	mock *MockJobsService
}

// NewMockJobsService creates a new mock instance.
func NewMockJobsService(ctrl *gomock.Controller) *MockJobsService {
	mock := &MockJobsService{ctrl: ctrl}
	mock.recorder = &MockJobsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobsService) EXPECT() *MockJobsServiceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockJobsService) List(arg0 context.Context, arg1 string, arg2 *amclient.JobsListRequest) ([]amclient.Job, *amclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]amclient.Job)
	ret1, _ := ret[1].(*amclient.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockJobsServiceMockRecorder) List(arg0, arg1, arg2 any) *MockJobsServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockJobsService)(nil).List), arg0, arg1, arg2)
	return &MockJobsServiceListCall{Call: call}
}

// MockJobsServiceListCall wrap *gomock.Call
type MockJobsServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobsServiceListCall) Return(arg0 []amclient.Job, arg1 *amclient.Response, arg2 error) *MockJobsServiceListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobsServiceListCall) Do(f func(context.Context, string, *amclient.JobsListRequest) ([]amclient.Job, *amclient.Response, error)) *MockJobsServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobsServiceListCall) DoAndReturn(f func(context.Context, string, *amclient.JobsListRequest) ([]amclient.Job, *amclient.Response, error)) *MockJobsServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
