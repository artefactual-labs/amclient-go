// Code generated by MockGen. DO NOT EDIT.
// Source: go.artefactual.dev/amclient (interfaces: IngestService)
//
// Generated by this command:
//
//	mockgen -typed -destination=./amclienttest/mock_ingest.go -package=amclienttest go.artefactual.dev/amclient IngestService
//

// Package amclienttest is a generated GoMock package.
package amclienttest

import (
	context "context"
	reflect "reflect"

	amclient "go.artefactual.dev/amclient"
	gomock "go.uber.org/mock/gomock"
)

// MockIngestService is a mock of IngestService interface.
type MockIngestService struct {
	ctrl     *gomock.Controller
	recorder *MockIngestServiceMockRecorder
}

// MockIngestServiceMockRecorder is the mock recorder for MockIngestService.
type MockIngestServiceMockRecorder struct {
	mock *MockIngestService
}

// NewMockIngestService creates a new mock instance.
func NewMockIngestService(ctrl *gomock.Controller) *MockIngestService {
	mock := &MockIngestService{ctrl: ctrl}
	mock.recorder = &MockIngestServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngestService) EXPECT() *MockIngestServiceMockRecorder {
	return m.recorder
}

// Hide mocks base method.
func (m *MockIngestService) Hide(arg0 context.Context, arg1 string) (*amclient.IngestHideResponse, *amclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hide", arg0, arg1)
	ret0, _ := ret[0].(*amclient.IngestHideResponse)
	ret1, _ := ret[1].(*amclient.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Hide indicates an expected call of Hide.
func (mr *MockIngestServiceMockRecorder) Hide(arg0, arg1 any) *MockIngestServiceHideCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hide", reflect.TypeOf((*MockIngestService)(nil).Hide), arg0, arg1)
	return &MockIngestServiceHideCall{Call: call}
}

// MockIngestServiceHideCall wrap *gomock.Call
type MockIngestServiceHideCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngestServiceHideCall) Return(arg0 *amclient.IngestHideResponse, arg1 *amclient.Response, arg2 error) *MockIngestServiceHideCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngestServiceHideCall) Do(f func(context.Context, string) (*amclient.IngestHideResponse, *amclient.Response, error)) *MockIngestServiceHideCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngestServiceHideCall) DoAndReturn(f func(context.Context, string) (*amclient.IngestHideResponse, *amclient.Response, error)) *MockIngestServiceHideCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockIngestService) Status(arg0 context.Context, arg1 string) (*amclient.IngestStatusResponse, *amclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*amclient.IngestStatusResponse)
	ret1, _ := ret[1].(*amclient.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Status indicates an expected call of Status.
func (mr *MockIngestServiceMockRecorder) Status(arg0, arg1 any) *MockIngestServiceStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockIngestService)(nil).Status), arg0, arg1)
	return &MockIngestServiceStatusCall{Call: call}
}

// MockIngestServiceStatusCall wrap *gomock.Call
type MockIngestServiceStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngestServiceStatusCall) Return(arg0 *amclient.IngestStatusResponse, arg1 *amclient.Response, arg2 error) *MockIngestServiceStatusCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngestServiceStatusCall) Do(f func(context.Context, string) (*amclient.IngestStatusResponse, *amclient.Response, error)) *MockIngestServiceStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngestServiceStatusCall) DoAndReturn(f func(context.Context, string) (*amclient.IngestStatusResponse, *amclient.Response, error)) *MockIngestServiceStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
