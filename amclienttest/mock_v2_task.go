// Code generated by MockGen. DO NOT EDIT.
// Source: go.artefactual.dev/amclient (interfaces: TaskService)
//
// Generated by this command:
//
//	mockgen -typed -destination=./amclienttest/mock_v2_task.go -package=amclienttest go.artefactual.dev/amclient TaskService
//

// Package amclienttest is a generated GoMock package.
package amclienttest

import (
	context "context"
	reflect "reflect"

	amclient "go.artefactual.dev/amclient"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskService is a mock of TaskService interface.
type MockTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceMockRecorder
}

// MockTaskServiceMockRecorder is the mock recorder for MockTaskService.
type MockTaskServiceMockRecorder struct {
	mock *MockTaskService
}

// NewMockTaskService creates a new mock instance.
func NewMockTaskService(ctrl *gomock.Controller) *MockTaskService {
	mock := &MockTaskService{ctrl: ctrl}
	mock.recorder = &MockTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskService) EXPECT() *MockTaskServiceMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockTaskService) Read(arg0 context.Context, arg1 string) (*amclient.Task, *amclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*amclient.Task)
	ret1, _ := ret[1].(*amclient.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read.
func (mr *MockTaskServiceMockRecorder) Read(arg0, arg1 any) *MockTaskServiceReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTaskService)(nil).Read), arg0, arg1)
	return &MockTaskServiceReadCall{Call: call}
}

// MockTaskServiceReadCall wrap *gomock.Call
type MockTaskServiceReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskServiceReadCall) Return(arg0 *amclient.Task, arg1 *amclient.Response, arg2 error) *MockTaskServiceReadCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskServiceReadCall) Do(f func(context.Context, string) (*amclient.Task, *amclient.Response, error)) *MockTaskServiceReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskServiceReadCall) DoAndReturn(f func(context.Context, string) (*amclient.Task, *amclient.Response, error)) *MockTaskServiceReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
